name: CI Pipeline for Spring Boot App

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v3

    - name: Set Up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Cache Maven Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: List target directory (debugging)
      run: ls -l target/  # Check the files in the target directory for the WAR file

    - name: Set up SSH key for deployment
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}  # Ensure the private key is correctly added in GitHub Secrets

    - name: Deploy WAR file to Tomcat
      run: |
        # Define the WAR file location
        WAR_FILE=$(find target/ -name "*.war")
        TOMCAT_USER=maaz
        TOMCAT_HOST=localhost
        DEPLOY_PATH="D:/Soft/webapps"  # Change this to the actual path on your local server

        # Check if the WAR file exists
        if [ -z "$WAR_FILE" ]; then
          echo "WAR file not found! Deployment aborted."
          exit 1
        fi

        echo "WAR file found at: $WAR_FILE"

        # Ensure the Tomcat server path is correct and accessible
        echo "Deploying to Tomcat at: $TOMCAT_USER@$TOMCAT_HOST:$DEPLOY_PATH"
        
        # Copy the WAR file to the Tomcat webapps directory
        scp "$WAR_FILE" "$TOMCAT_USER@$TOMCAT_HOST:$DEPLOY_PATH"
        
        echo "WAR file copied successfully."
